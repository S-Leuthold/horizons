
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "horizons"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('horizons')
horizons v0.7.5 loaded. Please flag bugs on Github (www.github.com/S-Leuthold/horizons)
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("build_ensemble_stack")
> ### * build_ensemble_stack
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: build_ensemble_stack
> ### Title: Build, Blend, and Evaluate a Stacked Ensemble from Top Workflows
> ### Aliases: build_ensemble_stack
> 
> ### ** Examples
> 
> ## Not run: 
> ##D model_results <- build_ensemble_stack(
> ##D   top_workflows = filtered_workflows,
> ##D   input_data    = my_data,
> ##D   variable      = "SOC_pct"
> ##D )
> ##D 
> ##D model_results$evaluation_metrics
> ##D model_results$predictions
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("build_recipe")
> ### * build_recipe
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: build_recipe
> ### Title: Build Tidymodels Recipe for Spectral + Covariate Modeling
> ### Aliases: build_recipe
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D build_recipe(
> ##D   input_data              = df,
> ##D   spectral_transformation = "snv_deriv1",
> ##D   response_transformation = "Log Transformation",
> ##D   covariate_selection     = c("Clay", "pH"),
> ##D   covariate_data          = covariates
> ##D )
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("cluster_spectral_data")
> ### * cluster_spectral_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cluster_spectral_data
> ### Title: Cluster Mid-Infrared Spectra via PCA and K-Means
> ### Aliases: cluster_spectral_data
> 
> ### ** Examples
> 
> ## Not run: 
> ##D clustered <- cluster_spectral_data(my_spectral_data)
> ##D head(clustered$input_data)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("cluster_spectral_predictors")
> ### * cluster_spectral_predictors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cluster_spectral_predictors
> ### Title: Cluster Spectral Predictors to Reduce Redundancy
> ### Aliases: cluster_spectral_predictors
> 
> ### ** Examples
> 
> ## Not run: 
> ##D result <- cluster_spectral_predictors(spectra, k = 300)
> ##D head(result$reduced_mat)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("create_clustered_subsets")
> ### * create_clustered_subsets
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_clustered_subsets
> ### Title: Create Clustered Training Subsets from PCA Scores
> ### Aliases: create_clustered_subsets
> 
> ### ** Examples
> 
> ## Not run: 
> ##D training_subsets <- create_clustered_subsets(
> ##D   training_data = my_training_data,
> ##D   pca_model     = my_pca_model,
> ##D   kmeans_model  = my_kmeans_model,
> ##D   n_components  = 50,
> ##D   coverage      = 0.8
> ##D )
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("create_project_configurations")
> ### * create_project_configurations
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_project_configurations
> ### Title: Create Model Configuration Grid for Horizons Workflows
> ### Aliases: create_project_configurations
> 
> ### ** Examples
> 
> ## Not run: 
> ##D config_grid <- create_project_configurations(
> ##D   project_data       = my_project_data,
> ##D   models             = c("xgboost", "cubist"),
> ##D   transformations    = c("none", "log"),
> ##D   preprocessing      = c("SNV", "SG-1D"),
> ##D   soil_covariates    = "all",
> ##D   climate_covariates = c("MAT", "MAP"),
> ##D   expand_covariate_grid = TRUE
> ##D )
> ##D 
> ##D config_grid$project_configurations
> ##D config_grid$covariate_data
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("create_project_data")
> ### * create_project_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_project_data
> ### Title: Create Unified Input Data for Spectral Modeling
> ### Aliases: create_project_data
> 
> ### ** Examples
> 
> ## Not run: 
> ##D projects <- project_list(
> ##D   FFAR = project_entry("data/FFAR/spectra", "data/FFAR/soil.csv"),
> ##D   AONR = project_entry("data/AONR/OPUS", "data/AONR/soil.csv", default_fraction = "Clay")
> ##D )
> ##D 
> ##D spectra_data <- create_project_data(
> ##D   projects      = projects,
> ##D   variables     = c("Sand", "pH"),
> ##D   save_spectra  = TRUE,
> ##D   save_locale   = "data/processed"
> ##D )
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("create_summary_table")
> ### * create_summary_table
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_summary_table
> ### Title: Generate Summary Table of Candidate and Ensemble Model Metrics
> ### Aliases: create_summary_table
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D create_summary_table(ensemble_metrics = best_stack_metrics,
> ##D                      candidate_metrics = best_candidate_metrics)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("define_model_specifications")
> ### * define_model_specifications
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: define_model_specifications
> ### Title: Define a Parsnip Model Specification for Soil Spectral Modeling
> ### Aliases: define_model_specifications
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D define_model_specifications("random_forest")
> ##D define_model_specifications("plsr")
> ##D define_model_specifications("mlp_nn")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("download_horizons_data")
> ### * download_horizons_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: download_horizons_data
> ### Title: Download and Cache OSSL Core Datasets
> ### Aliases: download_horizons_data
> 
> ### ** Examples
> 
> ## Not run: 
> ##D download_horizons_data()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("download_ossl_data")
> ### * download_ossl_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: download_ossl_data
> ### Title: Download and Preprocess OSSL Spectral and Covariate Data
> ### Aliases: download_ossl_data
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Download and preprocess OSSL data for pH and Sand
> ##D ossl_data <- download_ossl_data(covariates = c("pH", "Sand"))
> ##D 
> ##D # Preview structure
> ##D glimpse(ossl_data)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("evaluate_final_models")
> ### * evaluate_final_models
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: evaluate_final_models
> ### Title: Evaluate Final Models on Holdout Data
> ### Aliases: evaluate_final_models
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D evaluate_final_models(
> ##D   finalized_wf_sets = fitted_model_tbl,
> ##D   holdout_data      = test_samples
> ##D )
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("evaluate_model_config")
> ### * evaluate_model_config
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: evaluate_model_config
> ### Title: Evaluate a Single Model Configuration on Spectral Data
> ### Aliases: evaluate_model_config
> 
> ### ** Examples
> 
> ## Not run: 
> ##D config_result <- evaluate_model_config(
> ##D   input_data        = my_spectral_data,
> ##D   covariate_data    = my_covs,
> ##D   variable          = "MAOM_C_g_kg",
> ##D   model             = "cubist",
> ##D   transformation    = "Log",
> ##D   preprocessing     = "snv",
> ##D   covariates        = c("Clay", "pH"),
> ##D   include_covariates = TRUE
> ##D )
> ##D 
> ##D config_result$evaluation_results
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("evaluate_predictions")
> ### * evaluate_predictions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: evaluate_predictions
> ### Title: Evaluate Predicted Covariates Against Measured Values
> ### Aliases: evaluate_predictions
> 
> ### ** Examples
> 
> ## Not run: 
> ##D results <- evaluate_predictions(
> ##D   measured_data = my_measured_data,
> ##D   modeled_data  = my_predicted_data
> ##D )
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("fetch_climate_covariates")
> ### * fetch_climate_covariates
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fetch_climate_covariates
> ### Title: Retrieve and Summarize Climate Covariates from Daymet
> ### Aliases: fetch_climate_covariates
> 
> ### ** Examples
> 
> ## Not run: 
> ##D fetch_climate_covariates(
> ##D   input_data = my_soil_data,
> ##D   start_year = 2010,
> ##D   end_year = 2020,
> ##D   gdd_base = 5
> ##D )
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("fit_cubist_model")
> ### * fit_cubist_model
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fit_cubist_model
> ### Title: Fit a Cubist Model Using PCA-Transformed Spectral Data
> ### Aliases: fit_cubist_model
> 
> ### ** Examples
> 
> ## Not run: 
> ##D df <- tibble::tibble(
> ##D   Dim.1 = rnorm(100),
> ##D   Dim.2 = rnorm(100),
> ##D   Dim.3 = rnorm(100),
> ##D   Sand  = runif(100, 50, 80)
> ##D )
> ##D 
> ##D result <- fit_cubist_model(input_data = df, covariate = "Sand", verbose = TRUE)
> ##D result$Evaluation
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("get_ossl_data_path")
> ### * get_ossl_data_path
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_ossl_data_path
> ### Title: Get Path to Cached OSSL Dataset File
> ### Aliases: get_ossl_data_path
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D get_ossl_data_path("lab")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("get_processed_mir_path")
> ### * get_processed_mir_path
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_processed_mir_path
> ### Title: Get Path to Processed MIR Spectra File
> ### Aliases: get_processed_mir_path
> 
> ### ** Examples
> 
> ## Not run: 
> ##D get_processed_mir_path()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_ensemble_biplot")
> ### * plot_ensemble_biplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_ensemble_biplot
> ### Title: Plot Ensemble Predictions and Model Weights
> ### Aliases: plot_ensemble_biplot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D results <- build_ensemble_stack(...)
> ##D plots <- plot_ensemble_results(results)
> ##D print(plots$Obs_vs_Pred)
> ##D print(plots$Model_Weights)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("predict_covariates")
> ### * predict_covariates
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predict_covariates
> ### Title: Predict Soil Covariates from MIR Spectra Using Clustered Cubist
> ###   Models
> ### Aliases: predict_covariates
> 
> ### ** Examples
> 
> ## Not run: 
> ##D preds <- predict_covariates(
> ##D   covariates = c("Sand", "pH"),
> ##D   input_data = my_mir_data,
> ##D   refresh = TRUE
> ##D )
> ##D 
> ##D preds$Predicted_Values
> ##D preds$Evaluation_Statistics
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("project_entry")
> ### * project_entry
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: project_entry
> ### Title: Define a Project for Spectral Data Ingestion
> ### Aliases: project_entry
> 
> ### ** Examples
> 
> project_entry(
+   spectra_path        = "data/FFAR/spectra",
+   sample_obs          = "data/FFAR/soil.csv",
+   file_name_format    = "project_sampleid_fraction_ignore_ignore",
+   file_name_delimiter = "_",
+   default_fraction    = "Bulk"
+ )
Error in `project_entry()`:
! The provided `spectra_path` does not exist: 'data/FFAR/spectra'
Backtrace:
    ▆
 1. └─horizons::project_entry(...)
 2.   └─cli::cli_abort("The provided `spectra_path` does not exist: {.path {spectra_path}}")
 3.     └─rlang::abort(...)
Execution halted
