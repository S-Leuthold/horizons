% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/covariates-cubist.R
\name{fit_cubist_model}
\alias{fit_cubist_model}
\title{Fit a Cubist Model Using Similarity-Selected Training Data}
\usage{
fit_cubist_model(
  train_data,
  val_data,
  covariate,
  verbose = FALSE,
  parallel = FALSE,
  n_workers = NULL,
  bayesian_iter = 10
)
}
\arguments{
\item{train_data}{A \code{tibble} containing PCA-transformed predictors (\code{Dim.1}, \code{Dim.2}, etc.)
and the target covariate column. Should be pre-selected similar samples.}

\item{val_data}{A \code{tibble} with validation data (same structure as train_data)
for computing unbiased performance metrics.}

\item{covariate}{A character string. Name of the target covariate (e.g., \code{"clay"}, \code{"ph"}).}

\item{verbose}{Logical. If \code{TRUE}, prints progress messages. Defaults to \code{FALSE}.}

\item{parallel}{Logical. Enable parallel processing for tuning. Defaults to \code{FALSE}.}

\item{n_workers}{Integer. Number of parallel workers. If \code{NULL}, uses safe defaults.}

\item{bayesian_iter}{Integer. Number of Bayesian optimization iterations (default: 10).}

\item{allow_nested}{Logical. Allow parallel processing in nested context. Defaults to \code{FALSE}.}
}
\value{
A named \code{list} with the following components:
\itemize{
\item \strong{fitted_workflow}: A fitted Cubist workflow trained on train_data.
\item \strong{best_params}: A \code{tibble} with the best hyperparameter configuration.
\item \strong{validation_metrics}: A \code{tibble} of metrics computed on val_data.
}
}
\description{
Builds, tunes, and evaluates a Cubist model to predict a single soil covariate
using similarity-selected OSSL training data. The function applies a max entropy
grid search followed by Bayesian optimization to tune hyperparameters, then fits
the final model and returns both performance metrics and workflow objects.
}
\details{
The modeling pipeline follows three main stages:
\enumerate{
\item Stratified data split into training/testing sets.
\item Max entropy grid search for tuning \code{committees}, \code{neighbors}, and \code{max_rules} using \code{tune::tune_grid()}.
\item Bayesian optimization using \code{tune::tune_bayes()} for refinement.
}
The model is finalized with \code{tune::finalize_workflow()} and fitted to the training set.
Performance metrics are computed on the validation set using custom metric functions.

Parallel tuning is enabled with \code{future::plan(multisession)} and automatically reset afterward.
All error handling is wrapped with \code{safely_execute()} for fault-tolerant orchestration.
}
\examples{
\dontrun{
df <- tibble::tibble(
  Dim.1 = rnorm(100),
  Dim.2 = rnorm(100),
  Dim.3 = rnorm(100),
  Sand  = runif(100, 50, 80)
)

result <- fit_cubist_model(input_data = df, covariate = "Sand", verbose = TRUE)
result$Evaluation
}

}
\seealso{
\code{\link{predict_soil_covariates}}, \code{\link{perform_pca_on_ossl}}
}
