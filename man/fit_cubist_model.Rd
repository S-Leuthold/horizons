% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/covariates-soil-fit_cubist_model.R
\name{fit_cubist_model}
\alias{fit_cubist_model}
\title{Fit a Cubist Model Using PCA-Transformed Spectral Data}
\usage{
fit_cubist_model(input_data, covariate, verbose)
}
\arguments{
\item{input_data}{A \code{tibble} or \code{data.frame} containing PCA-transformed predictors
(\code{Dim.1}, \code{Dim.2}, ..., \code{Dim.n}) and one numeric column corresponding to the
covariate to be modeled. All rows with \code{NA} in the response are removed.}

\item{covariate}{A character string. Name of the column to use as the response variable (e.g., \code{"Sand"}, \code{"pH"}).}

\item{verbose}{Logical. If \code{TRUE}, prints progress messages using \verb{cli::cli_*()} during model training. Defaults to \code{FALSE}.}
}
\value{
A named \code{list} with the following components:
\itemize{
\item \strong{Model}: A fitted Cubist workflow (\code{workflow}) trained on the full training set.
\item \strong{Best_Parameters}: A \code{tibble} containing the best hyperparameter configuration selected via Bayesian optimization.
\item \strong{Evaluation}: A \code{tibble} of evaluation metrics (e.g., RMSE, RÂ², CCC) computed on the hold-out set using \code{soilspec::eval()}.
}
}
\description{
Builds, tunes, and evaluates a Cubist model to predict a single soil covariate
using PCA-transformed MIR spectra. The function applies a max entropy grid search
followed by Bayesian optimization to tune hyperparameters, then fits the final model
and returns both performance metrics and workflow objects.
}
\details{
The modeling pipeline follows three main stages:
\enumerate{
\item Stratified data split into training/testing sets.
\item Max entropy grid search for tuning \code{committees}, \code{neighbors}, and \code{max_rules} using \code{tune::tune_grid()}.
\item Bayesian optimization using \code{tune::tune_bayes()} for refinement.
}
The model is finalized with \code{tune::finalize_workflow()} and fitted to the training set.
Performance metrics are computed on the hold-out set using \code{tune::last_fit()} and \code{soilspec::eval()}.

Parallel tuning is enabled with \code{future::plan(multisession)} and automatically reset afterward.
All error handling is wrapped with \code{safely_execute()} for fault-tolerant orchestration.
}
\examples{
\dontrun{
df <- tibble::tibble(
  Dim.1 = rnorm(100),
  Dim.2 = rnorm(100),
  Dim.3 = rnorm(100),
  Sand  = runif(100, 50, 80)
)

result <- fit_cubist_model(input_data = df, covariate = "Sand", verbose = TRUE)
result$Evaluation
}

}
\seealso{
\code{\link{predict_covariates}}, \code{\link{evaluate_predictions}}, \code{\link{reduce_dimensions_pca}}
}
