% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/inputs-read.R
\name{read_spectra}
\alias{read_spectra}
\title{Read Spectral Data from OPUS or CSV Files}
\usage{
read_spectra(
  source = c("opus", "csv"),
  spectra_path = NULL,
  spectra_type = c("MIR", "NIR"),
  verbose = TRUE
)
}
\arguments{
\item{source}{\verb{[character]} Type of file to read: \code{"opus"} or \code{"csv"}. Default: \code{"opus"}}

\item{spectra_path}{\verb{[character]} Path to spectral data file(s).
\itemize{
\item For OPUS: path to \code{.0} file or directory containing \code{.0} files
\item For CSV: path to CSV file
}}

\item{spectra_type}{\verb{[character]} Type of spectroscopy: \code{"MIR"} or \code{"NIR"}.
Affects expected wavelength/wavenumber ranges. Default: \code{"MIR"}}

\item{verbose}{\verb{[logical]} Print informative messages about processing. Default: \code{TRUE}}
}
\value{
A \verb{[tibble]} with spectral data in wide format containing:
\itemize{
\item \code{Sample_ID}: Character. Unique sample identifier
\item \verb{<wavenumber_cols>}: Numeric columns named with wavenumber values (e.g., \code{"600"}, \code{"602"}, \code{"604"})
containing absorbance values
}

With attributes:
\itemize{
\item \code{source}: Character. Source type (\code{"opus"} or \code{"csv"})
\item \code{spectra_type}: Character. Spectroscopy type (\code{"MIR"} or \code{"NIR"})
\item \code{source_path}: Character. Original file path
}
}
\description{
Reads spectral data from OPUS binary files or CSV text files and returns it in
wide format suitable for modeling workflows. For OPUS files, automatically detects
and selects the optimal channel. All data is returned with standardized column
names and preserved metadata attributes.
}
\details{
This function serves as the entry point for the spectroscopy workflow. It handles:
\itemize{
\item OPUS binary file reading with automatic channel selection
\item CSV text file reading with format validation
\item Sample ID extraction and standardization
\item Metadata preservation via tibble attributes
}

The returned data structure uses numeric column names representing wavenumber
values, making it compatible with downstream preprocessing and modeling functions.
}
\examples{
\dontrun{
# Read OPUS file
spectra <- read_spectra(
  source = "opus",
  spectra_path = "data/sample.0",
  spectra_type = "MIR"
)

# Read CSV file
spectra <- read_spectra(
  source = "csv",
  spectra_path = "data/spectra.csv",
  spectra_type = "NIR"
)
}

}
\seealso{
\code{\link[=preprocess_spectra]{preprocess_spectra()}} for spectral preprocessing,
\code{\link[=create_dataset]{create_dataset()}} for combining with response data

Other inputs: 
\code{\link{create_configs}()},
\code{\link{create_dataset}()},
\code{\link{finalize_dataset}()},
\code{\link{preprocess_spectra}()}
}
\concept{inputs}
\keyword{data-import}
\keyword{spectroscopy}
