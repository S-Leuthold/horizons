% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils_error_handling.R
\name{safely_execute}
\alias{safely_execute}
\title{Safely Evaluate an Expression with Optional Logging and Tracing}
\usage{
safely_execute(
  expr,
  default_value = NULL,
  error_message = NULL,
  log_error = TRUE,
  capture_trace = FALSE,
  trace_log_file = NULL
)
}
\arguments{
\item{expr}{An expression to evaluate, passed unquoted.}

\item{default_value}{Value to return if the expression errors. Default is \code{NULL}.}

\item{error_message}{Optional string interpolated via \code{glue::glue()}, used as the log message.}

\item{log_error}{Logical. If \code{TRUE} (default), logs the error using \code{cli::cli_warn()}.}

\item{capture_trace}{Logical. If \code{TRUE}, captures a traceback using \code{rlang::trace_back()}.}

\item{trace_log_file}{Optional file path to write the trace, if \code{capture_trace = TRUE}.}
}
\value{
A named list with elements:
\describe{
\item{\code{result}}{The evaluated result or \code{default_value} if an error occurred.}
\item{\code{error}}{The error object, or \code{NULL} if the evaluation succeeded.}
\item{\code{trace}}{A trace object from \code{rlang}, or \code{NULL} if not captured.}
}
}
\description{
Evaluates an expression using \code{purrr::safely()} to prevent errors from halting execution.
If an error occurs, it returns a default value, optionally logs a custom message,
and can capture the call trace for debugging.
}
\details{
This function is useful when running potentially fragile code inside mapping,
parallelization, or ensemble modeling workflows. By capturing and optionally logging
errors without interrupting the overall workflow, it supports robust batch execution.

If \code{capture_trace = TRUE}, the call stack is stored and optionally written to disk.
This is helpful when debugging complex pipelines.
}
\examples{
\dontrun{
safely_execute(log("oops"), default_value = NA, error_message = "Failed to take log")
}

}
\seealso{
\code{\link[purrr]{safely}}, \code{\link[rlang]{trace_back}}, \code{\link[cli]{cli_warn}}
}
\keyword{internal}
